{{-- Table of Contents --}}
<aside class="table-of-contents" id="table-of-contents">
    <div class="toc-header">
        <h3>CONTENTS</h3>
    </div>
    <nav class="toc-nav" id="toc-nav">
        <!-- Generated by JavaScript -->
    </nav>
</aside>

{{-- Floating TOC Button --}}
<button class="toc-floating-btn" id="toc-floating-btn" aria-label="Open table of contents">
    <svg id="toc-lines-svg" fill="currentColor" viewBox="0 0 24 120">
        <!-- Generated by JavaScript -->
    </svg>
</button>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const content = document.querySelector('.post-content');
    const tocNav = document.getElementById('toc-nav');
    const tocContainer = document.getElementById('table-of-contents');
    const tocFloatingBtn = document.getElementById('toc-floating-btn');
    const tocLinesSvg = document.getElementById('toc-lines-svg');

    if (!content || !tocNav) return;

    // Extract headings (h2, h3, h4)
    const headings = content.querySelectorAll('h2, h3, h4');

    if (headings.length === 0) {
        // Hide TOC if no headings
        if (tocContainer) tocContainer.style.display = 'none';
        if (tocFloatingBtn) tocFloatingBtn.style.display = 'none';
        return;
    }

    // Generate lines based on number of headings
    function generateTOCLines(activeIndex = -1) {
        if (!tocLinesSvg) return;

        tocLinesSvg.innerHTML = '';
        const count = headings.length;
        const lineHeight = 1.5;
        const lineSpacing = 12;
        const totalHeight = (count * lineHeight) + ((count - 1) * lineSpacing) + 20;

        // Update button and SVG height
        tocFloatingBtn.style.height = totalHeight + 'px';
        tocLinesSvg.setAttribute('viewBox', `0 0 24 ${totalHeight}`);
        tocLinesSvg.style.height = totalHeight + 'px';

        let currentY = 10;
        for (let i = 0; i < count; i++) {
            const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');

            rect.setAttribute('x', '4');
            rect.setAttribute('y', currentY);
            rect.setAttribute('height', lineHeight);
            rect.setAttribute('class', 'toc-line');
            rect.setAttribute('data-index', i);

            if (i === activeIndex) {
                rect.setAttribute('width', '18');
                rect.style.opacity = '1';
            } else {
                rect.setAttribute('width', '14');
                rect.style.opacity = '0.5';
            }

            tocLinesSvg.appendChild(rect);
            currentY += lineHeight + lineSpacing;
        }
    }

    // Initial generation
    generateTOCLines();

    // Toggle TOC Modal Functions
    function openTOC() {
        tocContainer.classList.add('show');
    }

    function closeTOC() {
        tocContainer.classList.remove('show');
    }

    // Click outside to close
    document.addEventListener('click', function(e) {
        if (!tocContainer.contains(e.target) && !tocFloatingBtn.contains(e.target)) {
            closeTOC();
        }
    });

    // Prevent closing when clicking inside TOC
    if (tocContainer) {
        tocContainer.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    }

    // Generate TOC
    const tocList = document.createElement('ul');
    tocList.className = 'toc-list';

    headings.forEach((heading, index) => {
        // Generate ID if not exists
        if (!heading.id) {
            heading.id = 'heading-' + index;
        }

        const li = document.createElement('li');
        li.className = 'toc-item toc-' + heading.tagName.toLowerCase();

        const a = document.createElement('a');
        a.href = '#' + heading.id;
        a.textContent = heading.textContent;
        a.className = 'toc-link';

        // Smooth scroll
        a.addEventListener('click', function(e) {
            e.preventDefault();

            // Close TOC modal
            closeTOC();

            const target = document.getElementById(heading.id);
            if (target) {
                const offset = 80; // Header height
                const targetPosition = target.getBoundingClientRect().top + window.pageYOffset - offset;

                setTimeout(() => {
                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });
                }, 300);

                // Update active state
                document.querySelectorAll('.toc-link').forEach(link => link.classList.remove('active'));
                a.classList.add('active');
            }
        });

        li.appendChild(a);
        tocList.appendChild(li);
    });

    tocNav.appendChild(tocList);

    // Attach event listeners
    if (tocFloatingBtn) {
        tocFloatingBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            if (tocContainer.classList.contains('show')) {
                closeTOC();
            } else {
                openTOC();
            }
        });
    }

    // Highlight active section on scroll
    let ticking = false;
    window.addEventListener('scroll', function() {
        if (!ticking) {
            window.requestAnimationFrame(function() {
                updateActiveLink();
                ticking = false;
            });
            ticking = true;
        }
    });

    function updateActiveLink() {
        const scrollPos = window.pageYOffset + 100;
        let activeIndex = -1;

        headings.forEach((heading, index) => {
            const section = document.getElementById(heading.id);
            if (!section) return;

            const sectionTop = section.offsetTop;
            const sectionBottom = sectionTop + section.offsetHeight;

            if (scrollPos >= sectionTop && scrollPos < sectionBottom) {
                activeIndex = index;
                document.querySelectorAll('.toc-link').forEach(link => {
                    link.classList.remove('active');
                });
                const activeLink = tocNav.querySelector('a[href="#' + heading.id + '"]');
                if (activeLink) {
                    activeLink.classList.add('active');
                }
            }
        });

        // Update button lines
        generateTOCLines(activeIndex);
    }

    // Set first link as active initially
    const firstLink = tocNav.querySelector('.toc-link');
    if (firstLink) {
        firstLink.classList.add('active');
        generateTOCLines(0);
    }
});
</script>
